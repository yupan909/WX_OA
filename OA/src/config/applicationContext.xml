<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:p="http://www.springframework.org/schema/p" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
	<!-- 配置自动扫描的报 -->
	<context:component-scan base-package="com.java">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
	</context:component-scan>
	
	<!-- 导入资源文件 -->
	<context:property-placeholder location="classpath:db.properties"/>
	
	<!-- 1. 配置数据源 -->
	<bean id="datasource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="user" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<property name="driverClass" value="${jdbc.driverClass}"></property>
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
		
		<property name="initialPoolSize" value="${jdbc.initPoolSize}"></property>
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}"></property>
	</bean>
	
	<!-- 2.mybatis的sqlSession的工厂： SqlSessionFactoryBean 
		dataSource：引用数据源
		typeAliasesPackage：指定实体类的包名，自动将实体的简单类名映射成别名
		mapperLocations：指定加载xml文件的路径
	-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="datasource"></property>
		<property name="typeAliasesPackage" value="com.java.entity"></property>
		<property name="mapperLocations" value="classpath:com/java/mapper/*.xml"></property>
		<property name="configLocation" value="classpath:config/mybatis-config.xml"></property>
	</bean>

	<!-- 3.mybatis自动扫描加载sql映射文件/接口：MapperScannerConfigurer 
		basePackage: 指定sql映射文件/接口所在的包（自动扫描）,多个包路径可以用分号或逗号作为分隔符 ，前提是映射接口类文件(.java)和映射XML文件(.xml)需要放在相同的包下
		sqlSessionFactory: 引用上面定义的sqlSessionFactory
	-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.java.dao"></property>
		<!--<property name="sqlSessionFactory" ref="sqlSessionFactory"></property> -->
	</bean>
	
	<!-- 4.事务管理：DataSourceTransactionManager 把mybatis的事务交由spring去管理-->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="datasource"></property>
	</bean>
	
	<!-- 5.使用声明式事务 ,启用spring @Transactional注解-->
	<tx:annotation-driven transaction-manager="txManager"/>
	
	<!-- 上传附件 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"/>
	
</beans>	
